"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Initializers = void 0;
const RunInitMethodInitializer_1 = require("./initializers/RunInitMethodInitializer");
const RunSettersInitializer_1 = require("./initializers/RunSettersInitializer");
const Utils_1 = require("../Utils");
const InjectPropertiesInitializer_1 = require("./initializers/InjectPropertiesInitializer");
const RunBeforeModifier_1 = require("./initializers/RunBeforeModifier");
const RunAfterModifier_1 = require("./initializers/RunAfterModifier");
const MethodWrapperModifier_1 = require("./initializers/MethodWrapperModifier");
class Initializers {
    constructor(resolver, initializers) {
        this.resolver = resolver;
        this.initializers = [
            new RunBeforeModifier_1.RunBeforeModifier(this.resolver),
            new RunAfterModifier_1.RunAfterModifier(this.resolver),
            new MethodWrapperModifier_1.MethodWrapperModifier(this.resolver),
            new InjectPropertiesInitializer_1.InjectPropertiesInitializer(this.resolver),
            new RunSettersInitializer_1.RunSettersInitializer(this.resolver),
            new RunInitMethodInitializer_1.RunInitMethodInitializer(this.resolver),
        ];
        if (initializers)
            this.initializers = initializers;
    }
    addInitializers(InitializerTypes) {
        for (const InitializerType of InitializerTypes) {
            this.initializers.push(new InitializerType(this.resolver));
        }
    }
    runInitializers(instance, definition) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!instance || !Utils_1.Utils.isClass(definition.content))
                return instance;
            for (const initializer of this.initializers) {
                instance = yield initializer.run(instance, definition);
            }
            return instance;
        });
    }
}
exports.Initializers = Initializers;
//# sourceMappingURL=Initializers.js.map