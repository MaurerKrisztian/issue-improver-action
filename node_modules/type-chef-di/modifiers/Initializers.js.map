{"version":3,"file":"Initializers.js","sourceRoot":"","sources":["../../lib/modifiers/Initializers.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,sFAAmF;AAEnF,gFAA6E;AAC7E,oCAAiC;AACjC,4FAAyF;AACzF,wEAAqE;AACrE,sEAAmE;AACnE,gFAA6E;AAI7E,MAAa,YAAY;IAWrB,YAA6B,QAAmB,EAAE,YAA6B;QAAlD,aAAQ,GAAR,QAAQ,CAAW;QAVhD,iBAAY,GAAmB;YAC3B,IAAI,qCAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC;YACpC,IAAI,mCAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC;YACnC,IAAI,6CAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC;YAExC,IAAI,yDAA2B,CAAC,IAAI,CAAC,QAAQ,CAAC;YAC9C,IAAI,6CAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC;YACxC,IAAI,mDAAwB,CAAC,IAAI,CAAC,QAAQ,CAAC;SAC9C,CAAC;QAGE,IAAI,YAAY;YAAE,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACvD,CAAC;IAED,eAAe,CAAC,gBAAsC;QAClD,KAAK,MAAM,eAAe,IAAI,gBAAgB,EAAE;YAC5C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;SAC9D;IACL,CAAC;IAEK,eAAe,CAAC,QAAa,EAAE,UAA2B;;YAC5D,IAAI,CAAC,QAAQ,IAAI,CAAC,aAAK,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC;gBAAE,OAAO,QAAQ,CAAC;YAErE,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,YAAY,EAAE;gBACzC,QAAQ,GAAG,MAAM,WAAW,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;aAC1D;YAED,OAAO,QAAQ,CAAC;QACpB,CAAC;KAAA;CAGJ;AAhCD,oCAgCC","sourcesContent":["import { IInitializer } from \"./initializers/IInitializer\";\nimport { RunInitMethodInitializer } from \"./initializers/RunInitMethodInitializer\";\nimport { IResolver } from \"../interfaces/IResolver\";\nimport { RunSettersInitializer } from \"./initializers/RunSettersInitializer\";\nimport { Utils } from \"../Utils\";\nimport { InjectPropertiesInitializer } from \"./initializers/InjectPropertiesInitializer\";\nimport { RunBeforeModifier } from \"./initializers/RunBeforeModifier\";\nimport { RunAfterModifier } from \"./initializers/RunAfterModifier\";\nimport { MethodWrapperModifier } from \"./initializers/MethodWrapperModifier\";\nimport { IBaseDefinition } from \"../definitions/definitionInterfaces/IBaseDefinition\";\nimport { Type } from \"../interfaces/IType\";\n\nexport class Initializers {\n    initializers: IInitializer[] = [\n        new RunBeforeModifier(this.resolver),\n        new RunAfterModifier(this.resolver),\n        new MethodWrapperModifier(this.resolver),\n\n        new InjectPropertiesInitializer(this.resolver),\n        new RunSettersInitializer(this.resolver),\n        new RunInitMethodInitializer(this.resolver),\n    ];\n\n    constructor(private readonly resolver: IResolver, initializers?: IInitializer[]) {\n        if (initializers) this.initializers = initializers;\n    }\n\n    addInitializers(InitializerTypes: Type<IInitializer>[]) {\n        for (const InitializerType of InitializerTypes) {\n            this.initializers.push(new InitializerType(this.resolver));\n        }\n    }\n\n    async runInitializers(instance: any, definition: IBaseDefinition) {\n        if (!instance || !Utils.isClass(definition.content)) return instance;\n\n        for (const initializer of this.initializers) {\n            instance = await initializer.run(instance, definition);\n        }\n\n        return instance;\n    }\n\n\n}\n"]}