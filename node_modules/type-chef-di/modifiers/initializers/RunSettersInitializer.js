"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RunSettersInitializer = void 0;
const Keys_1 = require("../../Keys");
const ArgResolver_1 = require("../../definitions/helpers/ArgResolver");
class RunSettersInitializer {
    constructor(resolver) {
        this.resolver = resolver;
        this.argResolver = new ArgResolver_1.ArgResolver(this.resolver);
    }
    run(resolvedInstance, definition) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.runSetters(resolvedInstance, definition);
        });
    }
    runSetters(resolvedInstance, definition) {
        return __awaiter(this, void 0, void 0, function* () {
            const initMethodMeta = Reflect.getMetadata(Keys_1.Keys.SETTER_METHOD_PROPERTY_DECORATOR_KEY, definition.content) || {};
            const setterMethods = initMethodMeta[Keys_1.Keys.SETTER_METHOD_PROPERTY_DECORATOR_KEY];
            if (setterMethods === undefined || setterMethods.length <= 0)
                return resolvedInstance;
            for (const setterMethod of setterMethods) {
                if (setterMethod !== undefined) {
                    const setterParamsMeta = Reflect.getMetadata(setterMethod, definition.content) || {};
                    const setterFnArgs = (yield this.argResolver.resolveArguments(setterParamsMeta, definition.context, setterMethod)) || [];
                    if (setterFnArgs.length > 1) {
                        throw new Error(`@Setter method too many args (pleas pass 1 @inject('key') arg) to ${setterMethod}`);
                    }
                    try {
                        resolvedInstance[setterMethod] = setterFnArgs[0];
                    }
                    catch (err) {
                        throw new Error("@Setter method only allowed to setters (example: @Setter() set setVariable(@Inject('key') param){...})");
                    }
                }
            }
            return resolvedInstance;
        });
    }
}
exports.RunSettersInitializer = RunSettersInitializer;
//# sourceMappingURL=RunSettersInitializer.js.map