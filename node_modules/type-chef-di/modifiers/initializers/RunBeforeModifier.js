"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RunBeforeModifier = void 0;
const Keys_1 = require("../../Keys");
class RunBeforeModifier {
    constructor(resolver) {
        this.resolver = resolver;
    }
    run(instance, definition) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.setBeforeMethod(instance, definition);
        });
    }
    setBeforeMethod(resolvedInstance, definition) {
        return __awaiter(this, void 0, void 0, function* () {
            const beforeMeta = Reflect.getMetadata(Keys_1.Keys.BEFORE_METHOD_KEY, resolvedInstance.constructor) || {};
            if (!beforeMeta)
                return resolvedInstance;
            for (const key in beforeMeta) {
                const resolveRunBefore = typeof beforeMeta[key] === "string" ? yield this.resolver.resolve(beforeMeta[key]) : yield this.resolver.resolveByType(beforeMeta[key]);
                const descriptorOriginal = Reflect.getMetadata(Keys_1.Keys.METHOD_DESCRIPTOR_KEY, resolvedInstance.constructor) || {};
                resolvedInstance[key] = function (...args) {
                    var _a;
                    resolveRunBefore.run();
                    return (_a = descriptorOriginal.value) === null || _a === void 0 ? void 0 : _a.apply(this, args);
                };
            }
            return resolvedInstance;
        });
    }
}
exports.RunBeforeModifier = RunBeforeModifier;
//# sourceMappingURL=RunBeforeModifier.js.map