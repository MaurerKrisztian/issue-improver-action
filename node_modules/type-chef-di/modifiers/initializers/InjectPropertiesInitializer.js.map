{"version":3,"file":"InjectPropertiesInitializer.js","sourceRoot":"","sources":["../../../lib/modifiers/initializers/InjectPropertiesInitializer.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,qCAAkC;AAClC,uEAAoE;AAGpE,MAAa,2BAA2B;IAGpC,YAAqB,QAAmB;QAAnB,aAAQ,GAAR,QAAQ,CAAW;QAFxC,gBAAW,GAAgB,IAAI,yBAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAG1D,CAAC;IAEK,GAAG,CAAC,gBAAqB,EAAE,UAAe;;YAC5C,OAAO,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC;QAC/D,CAAC;KAAA;IAEK,gBAAgB,CAAC,gBAAqB,EAAE,UAAe;;YACzD,MAAM,cAAc,GAAG,OAAO,CAAC,WAAW,CAAC,WAAI,CAAC,mBAAmB,EAAE,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YAC/F,IAAI,CAAC,cAAc;gBAAE,OAAO,gBAAgB,CAAC;YAE7C,MAAM,mBAAmB,GAAG,CAAC,GAAQ,EAAE,KAAU,EAAE,EAAE;gBACjD,gBAAgB,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;YAClC,CAAC,CAAC;YAEF,KAAK,MAAM,GAAG,IAAI,cAAc,EAAE;gBAC9B,MAAM,WAAW,GAAG,OAAQ,cAAc,CAAC,GAAG,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAE,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAE,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC3K,mBAAmB,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;aACzC;YAED,OAAO,gBAAgB,CAAC;QAC5B,CAAC;KAAA;CAGJ;AA3BD,kEA2BC","sourcesContent":["import { IInitializer } from \"./IInitializer\";\nimport { Keys } from \"../../Keys\";\nimport { ArgResolver } from \"../../definitions/helpers/ArgResolver\";\nimport { IResolver } from \"../../interfaces/IResolver\";\n\nexport class InjectPropertiesInitializer implements IInitializer {\n    argResolver: ArgResolver = new ArgResolver(this.resolver);\n\n    constructor(readonly resolver: IResolver) {\n    }\n\n    async run(resolvedInstance: any, definition: any): Promise<any> {\n        return this.injectProperties(resolvedInstance, definition);\n    }\n\n    async injectProperties(resolvedInstance: any, definition: any): Promise<any> {\n        const propertiesMeta = Reflect.getMetadata(Keys.PROPERTY_INJECT_KEY, definition.content) || {};\n        if (!propertiesMeta) return resolvedInstance;\n\n        const setInstanceProperty = (key: any, value: any) => {\n            resolvedInstance[key] = value;\n        };\n\n        for (const key in propertiesMeta) {\n            const resolvedKey = typeof  propertiesMeta[key] === \"string\" ? await this.resolver.resolve( propertiesMeta[key]) : await this.resolver.resolveByType( propertiesMeta[key]);\n            setInstanceProperty(key, resolvedKey);\n        }\n\n        return resolvedInstance;\n    }\n\n\n}\n"]}