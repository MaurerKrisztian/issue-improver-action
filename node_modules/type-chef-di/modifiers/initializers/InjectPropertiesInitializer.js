"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InjectPropertiesInitializer = void 0;
const Keys_1 = require("../../Keys");
const ArgResolver_1 = require("../../definitions/helpers/ArgResolver");
class InjectPropertiesInitializer {
    constructor(resolver) {
        this.resolver = resolver;
        this.argResolver = new ArgResolver_1.ArgResolver(this.resolver);
    }
    run(resolvedInstance, definition) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.injectProperties(resolvedInstance, definition);
        });
    }
    injectProperties(resolvedInstance, definition) {
        return __awaiter(this, void 0, void 0, function* () {
            const propertiesMeta = Reflect.getMetadata(Keys_1.Keys.PROPERTY_INJECT_KEY, definition.content) || {};
            if (!propertiesMeta)
                return resolvedInstance;
            const setInstanceProperty = (key, value) => {
                resolvedInstance[key] = value;
            };
            for (const key in propertiesMeta) {
                const resolvedKey = typeof propertiesMeta[key] === "string" ? yield this.resolver.resolve(propertiesMeta[key]) : yield this.resolver.resolveByType(propertiesMeta[key]);
                setInstanceProperty(key, resolvedKey);
            }
            return resolvedInstance;
        });
    }
}
exports.InjectPropertiesInitializer = InjectPropertiesInitializer;
//# sourceMappingURL=InjectPropertiesInitializer.js.map