{"version":3,"file":"RunAfterModifier.js","sourceRoot":"","sources":["../../../lib/modifiers/initializers/RunAfterModifier.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,qCAAkC;AAKlC,MAAa,gBAAgB;IAEzB,YAAqB,QAAmB;QAAnB,aAAQ,GAAR,QAAQ,CAAW;IACxC,CAAC;IAEK,GAAG,CAAC,QAAa,EAAE,UAAe;;YACpC,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAClD,CAAC;KAAA;IAEK,WAAW,CAAC,gBAAqB,EAAE,UAAe;;YACpD,MAAM,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,WAAI,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;YACjG,IAAI,CAAC,SAAS;gBAAE,OAAO,gBAAgB,CAAC;YAExC,KAAK,MAAM,GAAG,IAAI,SAAS,EAAE;gBACzB,MAAM,eAAe,GAAc,OAAO,SAAS,CAAC,GAAG,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;gBACxK,MAAM,kBAAkB,GAAG,OAAO,CAAC,WAAW,CAAC,WAAI,CAAC,qBAAqB,EAAE,gBAAgB,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;gBAC/G,gBAAgB,CAAC,GAAG,CAAC,GAAI,UAAqB,GAAG,IAAS;;oBACtD,MAAM,GAAG,GAAG,MAAA,kBAAkB,CAAC,KAAK,0CAAE,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;oBACxD,eAAe,CAAC,GAAG,EAAE,CAAC;oBACtB,OAAO,GAAG,CAAC;gBACf,CAAC,CAAC;aACL;YAED,OAAO,gBAAgB,CAAC;QAC5B,CAAC;KAAA;CAEJ;AA1BD,4CA0BC","sourcesContent":["import { Keys } from \"../../Keys\";\nimport { IRunAfter } from \"../../interfaces/IRunAfter\";\nimport { IResolver } from \"../../interfaces/IResolver\";\nimport { IInitializer } from \"./IInitializer\";\n\nexport class RunAfterModifier implements IInitializer {\n\n    constructor(readonly resolver: IResolver) {\n    }\n\n    async run(instance: any, definition: any): Promise<any> {\n        return this.setRunAfter(instance, definition);\n    }\n\n    async setRunAfter(resolvedInstance: any, definition: any) {\n        const afterMeta = Reflect.getMetadata(Keys.AFTER_METHOD_KEY, resolvedInstance.constructor) || {};\n        if (!afterMeta) return resolvedInstance;\n\n        for (const key in afterMeta) {\n            const resolveRunAfter: IRunAfter = typeof afterMeta[key] === \"string\" ? await this.resolver.resolve(afterMeta[key]) : await this.resolver.resolveByType(afterMeta[key]);\n            const descriptorOriginal = Reflect.getMetadata(Keys.METHOD_DESCRIPTOR_KEY, resolvedInstance.constructor) || {};\n            resolvedInstance[key]  = function (this: any, ...args: any) {\n                const res = descriptorOriginal.value?.apply(this, args);\n                resolveRunAfter.run();\n                return res;\n            };\n        }\n\n        return resolvedInstance;\n    }\n\n}\n"]}