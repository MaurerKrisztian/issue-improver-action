{"version":3,"file":"RunBeforeModifier.js","sourceRoot":"","sources":["../../../lib/modifiers/initializers/RunBeforeModifier.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,qCAAkC;AAKlC,MAAa,iBAAiB;IAC1B,YAAqB,QAAmB;QAAnB,aAAQ,GAAR,QAAQ,CAAW;IAExC,CAAC;IAEK,GAAG,CAAC,QAAa,EAAE,UAAe;;YACpC,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QACtD,CAAC;KAAA;IAEK,eAAe,CAAC,gBAAqB,EAAE,UAAe;;YACxD,MAAM,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,WAAI,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;YACnG,IAAI,CAAC,UAAU;gBAAE,OAAO,gBAAgB,CAAC;YAEzC,KAAK,MAAM,GAAG,IAAI,UAAU,EAAE;gBAC1B,MAAM,gBAAgB,GAAe,OAAO,UAAU,CAAC,GAAG,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC7K,MAAM,kBAAkB,GAAG,OAAO,CAAC,WAAW,CAAC,WAAI,CAAC,qBAAqB,EAAE,gBAAgB,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;gBAC/G,gBAAgB,CAAC,GAAG,CAAC,GAAK,UAAqB,GAAG,IAAS;;oBACvD,gBAAgB,CAAC,GAAG,EAAE,CAAC;oBACvB,OAAO,MAAA,kBAAkB,CAAC,KAAK,0CAAE,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACvD,CAAC,CAAC;aACL;YAED,OAAO,gBAAgB,CAAC;QAC5B,CAAC;KAAA;CAEJ;AAzBD,8CAyBC","sourcesContent":["import { Keys } from \"../../Keys\";\nimport { IRunBefore } from \"../../interfaces/IRunBefore\";\nimport { IResolver } from \"../../interfaces/IResolver\";\nimport { IInitializer } from \"./IInitializer\";\n\nexport class RunBeforeModifier implements IInitializer {\n    constructor(readonly resolver: IResolver) {\n\n    }\n\n    async run(instance: any, definition: any): Promise<any> {\n        return this.setBeforeMethod(instance, definition);\n    }\n\n    async setBeforeMethod(resolvedInstance: any, definition: any): Promise<any> {\n        const beforeMeta = Reflect.getMetadata(Keys.BEFORE_METHOD_KEY, resolvedInstance.constructor) || {};\n        if (!beforeMeta) return resolvedInstance;\n\n        for (const key in beforeMeta) {\n            const resolveRunBefore: IRunBefore = typeof beforeMeta[key] === \"string\" ? await this.resolver.resolve(beforeMeta[key]) : await this.resolver.resolveByType(beforeMeta[key]);\n            const descriptorOriginal = Reflect.getMetadata(Keys.METHOD_DESCRIPTOR_KEY, resolvedInstance.constructor) || {};\n            resolvedInstance[key]  =  function (this: any, ...args: any) {\n                resolveRunBefore.run();\n                return descriptorOriginal.value?.apply(this, args);\n            };\n        }\n\n        return resolvedInstance;\n    }\n\n}\n"]}