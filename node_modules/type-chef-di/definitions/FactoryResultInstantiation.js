"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FactoryResultInstantiation = void 0;
const ArgResolver_1 = require("./helpers/ArgResolver");
class FactoryResultInstantiation {
    constructor(definition, container) {
        this.container = container;
        this.tags = [];
        this.definition = definition;
        this.argResolver = new ArgResolver_1.ArgResolver(this.container);
    }
    instantiate() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getFactoryResult(this.definition);
        });
    }
    getFactoryResult(factoryResultDefinition) {
        return __awaiter(this, void 0, void 0, function* () {
            if (factoryResultDefinition.factoryKey === undefined)
                throw new Error(`cannot resolve ${factoryResultDefinition.key} as factory because do not have factoryKey`);
            const factoryDefinition = this.container.definitionsRepository.getDefinition(factoryResultDefinition.factoryKey).definition;
            const factoryObj = yield this.container.resolve(factoryResultDefinition.factoryKey);
            if (!(factoryDefinition === null || factoryDefinition === void 0 ? void 0 : factoryDefinition.factoryFn))
                factoryDefinition.factoryFn = "create";
            const meta = Reflect.getMetadata(factoryDefinition.factoryFn, factoryDefinition.content) || {};
            const factoryFnArgs = yield this.argResolver.resolveArguments(meta, factoryResultDefinition.factoryMethodContext, factoryDefinition.factoryFn);
            const result = factoryObj[factoryDefinition.factoryFn](...factoryFnArgs);
            return result;
        });
    }
}
exports.FactoryResultInstantiation = FactoryResultInstantiation;
//# sourceMappingURL=FactoryResultInstantiation.js.map