"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArgResolver = void 0;
const Keys_1 = require("../../Keys");
class ArgResolver {
    constructor(resolver) {
        this.resolver = resolver;
    }
    paramIsNotRequired(param) {
        return !this.resolver.hasKeyInDefinition(param.key) && !(param === null || param === void 0 ? void 0 : param.isRequired);
    }
    resolveArguments(meta, context, decoratorKey) {
        return __awaiter(this, void 0, void 0, function* () {
            let args = meta[decoratorKey];
            if (!args)
                return [];
            if (context) {
                args = this.mapContextToArgs(args, context);
            }
            const resolvedArgs = [];
            for (const arg of args) {
                if (!arg && this.resolver.options.enableAutoCreate) {
                    resolvedArgs.push(Keys_1.Keys.OTHER_INJECTION_REQUIRED);
                }
                else if (this.paramIsNotRequired(arg)) {
                    resolvedArgs.push(undefined);
                }
                else {
                    resolvedArgs.push(typeof arg.key === "string" ? yield this.resolver.resolve(arg.key, arg.isRequired) : yield this.resolver.resolveByType(arg.key));
                }
            }
            return resolvedArgs;
        });
    }
    mapContextToArgs(args, ctx) {
        return args.map((arg) => {
            if (ctx[arg.key]) {
                return { key: ctx[arg.key], isRequired: arg.isRequired, index: arg.index };
            }
            return arg;
        });
    }
}
exports.ArgResolver = ArgResolver;
//# sourceMappingURL=ArgResolver.js.map