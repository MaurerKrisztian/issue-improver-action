{"version":3,"file":"ConstructorInstantiation.js","sourceRoot":"","sources":["../../lib/definitions/ConstructorInstantiation.ts"],"names":[],"mappings":"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","sourcesContent":["import { Keys } from \"../Keys\";\nimport { IConstructorDefinition } from \"./definitionInterfaces/IConstructorDefinition\";\nimport { IInstantiatable } from \"../interfaces/IInstantiatable\";\nimport { IResolver } from \"../interfaces/IResolver\";\nimport { ArgResolver } from \"./helpers/ArgResolver\";\nimport { Utils } from \"../Utils\";\nimport { IInjectParamMeta } from \"../decorators/Inject\";\n\nexport class ConstructorInstantiation implements IInstantiatable {\n    tags: string[] = [];\n\n    definition: IConstructorDefinition;\n    argResolver: ArgResolver;\n\n    constructor(definition: IConstructorDefinition, private readonly resolver: IResolver) {\n        this.definition = definition;\n        this.argResolver = new ArgResolver(resolver);\n    }\n\n    async instantiate() {\n        return this.resolveConstructor(this.definition.content, this.definition.context, Keys.INJECT_PROPERTY_DECORATOR_KEY);\n    }\n\n    async resolveParentArgs(ctr: any) {\n        const args: any[] = [];\n        const parentCtr = Object.getPrototypeOf(ctr);\n        const parentArgs: any[] = Reflect.getMetadata(\"design:paramtypes\", parentCtr) || [];\n        for (const parentArg of parentArgs) {\n            args.push(await this.resolver.resolveByType(parentArg));\n        }\n\n        return args;\n    }\n\n    /*\n    * If has OTHER_INJECTION_REQUIRED arg (arg without key), this function will inject by type\n    *  - if enable AutoCreate in the options then if the container item not found it will create and register\n    * */\n    async resolveArgsWithoutKey(ctr: any, args: IInjectParamMeta[] | any): Promise<any[]> {\n        const constructorArgs = Reflect.getMetadata(\"design:paramtypes\", ctr) || [];\n        // correction if 0 param in constructorArgs\n        if (args.length === 0) {\n            for (let i = 0; i < Utils.getRequiredParamLength(ctr); i++) {\n                args.push(Keys.OTHER_INJECTION_REQUIRED);\n            }\n        }\n\n        for (let i = 0; i < args.length; i++) {\n            if (args[i] === Keys.OTHER_INJECTION_REQUIRED) {\n                args[i] = await this.resolver.resolveByType(constructorArgs[i]);\n            }\n        }\n        return args;\n    }\n\n    private isResolvable(ctr: any) {\n        const meta: any = Reflect.getMetadata(Keys.INJECT_PROPERTY_DECORATOR_KEY, ctr) || {};\n        const constructorArgs = Reflect.getMetadata(\"design:paramtypes\", ctr) || [];\n        const propsMeta = meta[Keys.INJECT_PROPERTY_DECORATOR_KEY] || [];\n        for (let i = 0; i < constructorArgs.length; i++) {\n            if (!propsMeta[i] && !this.resolver.options.enableAutoCreate) {\n                throw new Error(`Can't resolve: ${Utils.logClass(ctr, i)} maybe try to register it or use {enableAutoCreate: true}`);\n            } else if (!propsMeta[i] && this.resolver.options.enableAutoCreate && Utils.isPrimitiveCtr(constructorArgs[i])) {\n                throw new Error(`Can't resolve primitive without registration ${Utils.logClass(ctr, i)}`);\n            }\n        }\n    }\n\n    private async resolveConstructor(ctr: any, context: any, decoratorKey: symbol) {\n        this.isResolvable(ctr);\n        const meta: any = Reflect.getMetadata(decoratorKey, ctr) || {};\n        let args: any[] = await this.argResolver.resolveArguments(meta, context, Keys.INJECT_PROPERTY_DECORATOR_KEY);\n        if (args.length === 0) {\n            args = await this.resolveParentArgs(ctr);\n        }\n\n        if (this.resolver.options.enableAutoCreate) {\n            args = await this.resolveArgsWithoutKey(ctr, args);\n        }\n        return new ctr(...args);\n    }\n\n}\n"]}