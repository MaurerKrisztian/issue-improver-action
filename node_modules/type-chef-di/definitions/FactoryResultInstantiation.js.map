{"version":3,"file":"FactoryResultInstantiation.js","sourceRoot":"","sources":["../../lib/definitions/FactoryResultInstantiation.ts"],"names":[],"mappings":";;;;;;;;;;;;AAGA,uDAAoD;AAEpD,MAAa,0BAA0B;IAMnC,YAAY,UAAoC,EAAmB,SAAoB;QAApB,cAAS,GAAT,SAAS,CAAW;QALvF,SAAI,GAAa,EAAE,CAAC;QAMhB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,IAAI,yBAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACvD,CAAC;IAEK,WAAW;;YACb,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAClD,CAAC;KAAA;IAEY,gBAAgB,CAAI,uBAAiD;;YAC9E,IAAI,uBAAuB,CAAC,UAAU,KAAK,SAAS;gBAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,uBAAuB,CAAC,GAAG,4CAA4C,CAAC,CAAC;YACjK,MAAM,iBAAiB,GAAQ,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,aAAa,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC,UAAU,CAAC;YACjI,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,uBAAuB,CAAC,UAAU,CAAQ,CAAC;YAC3F,IAAI,CAAC,CAAA,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,SAAS,CAAA;gBAAE,iBAAiB,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC1E,MAAM,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,iBAAiB,CAAC,SAAS,EAAE,iBAAiB,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YAC/F,MAAM,aAAa,GAAQ,MAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,EAAE,uBAAuB,CAAC,oBAAoB,EAAE,iBAAiB,CAAC,SAAS,CAAC,CAAC;YACpJ,MAAM,MAAM,GAAG,UAAU,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC;YACzE,OAAO,MAAW,CAAC;QACvB,CAAC;KAAA;CAEJ;AA1BD,gEA0BC","sourcesContent":["import { IFactoryResultDefinition } from \"./definitionInterfaces/IFactoryResultDefinition\";\nimport { IInstantiatable } from \"../interfaces/IInstantiatable\";\nimport { Container } from \"../Container\";\nimport { ArgResolver } from \"./helpers/ArgResolver\";\n\nexport class FactoryResultInstantiation implements IInstantiatable {\n    tags: string[] = [];\n\n    definition: IFactoryResultDefinition;\n    argResolver: ArgResolver;\n\n    constructor(definition: IFactoryResultDefinition, private readonly container: Container) {\n        this.definition = definition;\n        this.argResolver = new ArgResolver(this.container);\n    }\n\n    async instantiate() {\n        return this.getFactoryResult(this.definition);\n    }\n\n    public async getFactoryResult<T>(factoryResultDefinition: IFactoryResultDefinition): Promise<T> {\n        if (factoryResultDefinition.factoryKey === undefined) throw new Error(`cannot resolve ${factoryResultDefinition.key} as factory because do not have factoryKey`);\n        const factoryDefinition: any = this.container.definitionsRepository.getDefinition(factoryResultDefinition.factoryKey).definition;\n        const factoryObj = await this.container.resolve(factoryResultDefinition.factoryKey) as any;\n        if (!factoryDefinition?.factoryFn) factoryDefinition.factoryFn = \"create\";\n        const meta = Reflect.getMetadata(factoryDefinition.factoryFn, factoryDefinition.content) || {};\n        const factoryFnArgs: any = await this.argResolver.resolveArguments(meta, factoryResultDefinition.factoryMethodContext, factoryDefinition.factoryFn);\n        const result = factoryObj[factoryDefinition.factoryFn](...factoryFnArgs);\n        return result as T;\n    }\n\n}\n"]}