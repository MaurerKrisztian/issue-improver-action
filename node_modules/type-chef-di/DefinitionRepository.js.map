{"version":3,"file":"DefinitionRepository.js","sourceRoot":"","sources":["../lib/DefinitionRepository.ts"],"names":[],"mappings":";;;AAEA,iCAA8B;AAG9B,MAAa,oBAAoB;IAI7B,YAA6B,OAAyB;QAAzB,YAAO,GAAP,OAAO,CAAkB;QAHtD,gBAAW,GAAG,IAAI,GAAG,EAA2B,CAAC;IAIjD,CAAC;IAED,cAAc;QACV,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAED,aAAa,CAAC,GAAW;QACrB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YAC5B,MAAM,IAAI,KAAK,CAAC,GAAG,GAAG,wBAAwB,CAAC,CAAC;SACnD;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAoB,CAAC;IACxD,CAAC;IAED,mBAAmB,CAAC,WAAiB;QACjC,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,EAAE;YACnD,IAAI,KAAK,CAAC,UAAU,CAAC,OAAO,KAAK,WAAW,EAAE;gBAC1C,OAAO,KAAK,CAAC;aAChB;SACJ;QAED,IAAI,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE;YAC/B,OAAO,WAAI,CAAC,sBAAsB,CAAC;SACtC;QAED,MAAM,IAAI,KAAK,CAAC,iCAAiC,WAAW,EAAE,CAAC,CAAC;IACpE,CAAC;IAED,+BAA+B,CAAC,IAAc;QAC1C,MAAM,UAAU,GAAa,EAAE,CAAC;QAEhC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,KAAsB,EAAE,GAAW,EAAE,EAAE;YAC7D,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;YAC5D,IAAI,QAAQ,EAAE;gBACV,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACxB;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,UAAU,CAAC;IACtB,CAAC;IAED,OAAO,CAAC,GAAW,EAAE,IAAc;QAC/B,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAC3C,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;QAC9B,OAAO,UAAU,CAAC,IAAI,CAAC;IAC3B,CAAC;CAEJ;AAnDD,oDAmDC","sourcesContent":["import { IInstantiatable } from \"./interfaces/IInstantiatable\";\nimport { IContainerOption } from \"./Container\";\nimport { Keys } from \"./Keys\";\nimport { Type } from \"./interfaces/IType\";\n\nexport class DefinitionRepository {\n    definitions = new Map<string, IInstantiatable>();\n\n\n    constructor(private readonly options: IContainerOption) {\n    }\n\n    getDefinitions(): Map<string, IInstantiatable> {\n        return this.definitions;\n    }\n\n    getDefinition(key: string): IInstantiatable {\n        if (!this.definitions.has(key)) {\n            throw new Error(`${key} instance is undefined`);\n        }\n        return this.definitions.get(key) as IInstantiatable;\n    }\n\n    getDefinitionByType(constructor: Type): IInstantiatable | symbol {\n        for (const [key, value] of this.definitions.entries()) {\n            if (value.definition.content === constructor) {\n                return value;\n            }\n        }\n\n        if (this.options.enableAutoCreate) {\n            return Keys.AUTO_CREATE_DEPENDENCY;\n        }\n\n        throw new Error(`Definition not found by type: ${constructor}`);\n    }\n\n    getDefinitionKeysBySpecificTags(tags: string[]): string[] {\n        const resultKeys: string[] = [];\n\n        this.definitions.forEach((value: IInstantiatable, key: string) => {\n            const foundTag = tags.find(tag => value.tags.includes(tag));\n            if (foundTag) {\n                resultKeys.push(key);\n            }\n        });\n\n        return resultKeys;\n    }\n\n    addTags(key: string, tags: string[]): string[] {\n        const definition = this.getDefinition(key);\n        definition.tags.push(...tags);\n        return definition.tags;\n    }\n\n}\n"]}