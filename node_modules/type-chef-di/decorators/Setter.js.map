{"version":3,"file":"Setter.js","sourceRoot":"","sources":["../../lib/decorators/Setter.ts"],"names":[],"mappings":";;;AAAA,kCAA+B;AAE/B,SAAgB,MAAM;IAClB,OAAO,CACH,MAAc,EACd,WAAmB,EACnB,UAA8B,EAChC,EAAE;QACA,MAAM,QAAQ,GAAQ,OAAO,CAAC,WAAW,CAAC,WAAI,CAAC,oCAAoC,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;QAE/G,IAAI,QAAQ,CAAC,WAAI,CAAC,oCAAoC,CAAC,KAAK,SAAS,EAAE;YACnE,QAAQ,CAAC,WAAI,CAAC,oCAAoC,CAAC,GAAG,EAAE,CAAC;SAC5D;QAED,QAAQ,CAAC,WAAI,CAAC,oCAAoC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,uBAAuB;QAE9F,OAAO,CAAC,cAAc,CAAC,WAAI,CAAC,oCAAoC,EAAE,QAAQ,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;IACpG,CAAC,CAAC;AACN,CAAC;AAhBD,wBAgBC","sourcesContent":["import { Keys } from \"../Keys\";\n\nexport function Setter() {\n    return (\n        target: object,\n        propertyKey: string,\n        descriptor: PropertyDescriptor\n    ) => {\n        const metadata: any = Reflect.getMetadata(Keys.SETTER_METHOD_PROPERTY_DECORATOR_KEY, target.constructor) || {};\n\n        if (metadata[Keys.SETTER_METHOD_PROPERTY_DECORATOR_KEY] === undefined) {\n            metadata[Keys.SETTER_METHOD_PROPERTY_DECORATOR_KEY] = [];\n        }\n\n        metadata[Keys.SETTER_METHOD_PROPERTY_DECORATOR_KEY].push(propertyKey); // push setter methods.\n\n        Reflect.defineMetadata(Keys.SETTER_METHOD_PROPERTY_DECORATOR_KEY, metadata, target.constructor);\n    };\n}\n"]}