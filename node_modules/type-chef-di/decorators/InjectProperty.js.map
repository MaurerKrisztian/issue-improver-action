{"version":3,"file":"InjectProperty.js","sourceRoot":"","sources":["../../lib/decorators/InjectProperty.ts"],"names":[],"mappings":";;;AAAA,kCAA+B;AAG/B,SAAgB,cAAc,CAAU,GAAqB;IACzD,OAAO,SAAS,MAAM,CAEA,MAAS,EAAE,WAAc;QAC3C,MAAM,GAAG,GAAG,MAAM,CAAC,WAAW,CAAC;QAC/B,MAAM,QAAQ,GAAQ,OAAO,CAAC,WAAW,CAAC,WAAI,CAAC,mBAAmB,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC;QAC/E,QAAQ,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC;QAC5B,OAAO,CAAC,cAAc,CAAC,WAAI,CAAC,mBAAmB,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;IACpE,CAAC,CAAC;AACN,CAAC;AATD,wCASC","sourcesContent":["import { Keys } from \"../Keys\";\nimport { Type } from \"../interfaces/IType\";\n\nexport function InjectProperty<I = any>(key: string | Type<I>) {\n    return function inject<\n        T extends  Record<K, I>,\n        K extends string>(target: T, propertyKey: K) {\n        const ctr = target.constructor;\n        const metadata: any = Reflect.getMetadata(Keys.PROPERTY_INJECT_KEY, ctr) || {};\n        metadata[propertyKey] = key;\n        Reflect.defineMetadata(Keys.PROPERTY_INJECT_KEY, metadata, ctr);\n    };\n}\n"]}