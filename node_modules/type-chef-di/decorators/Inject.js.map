{"version":3,"file":"Inject.js","sourceRoot":"","sources":["../../lib/decorators/Inject.ts"],"names":[],"mappings":";;;AAAA,4BAA0B;AAC1B,kCAA+B;AAG/B;;IAEI;AACJ,SAAgB,MAAM,CAAU,WAA8B;IAC1D,OAAO,CACH,MAAW,EACX,GAAoB,EACpB,cAAsB,EACxB,EAAE;;QACA,MAAM,WAAW,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC;QACtD,MAAM,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,WAAI,CAAC,6BAA6B,CAAC;QAE/D,MAAM,aAAa,GAAG,CAAA,MAAA,MAAM,CAAC,GAAG,CAAC,0CAAE,MAAM,MAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM,CAAA,CAAC;QAE5D,MAAM,QAAQ,GAAQ,OAAO,CAAC,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,IAAI,EAAE,CAAC;QACtE,IAAI,QAAQ,CAAC,OAAO,CAAC,KAAK,SAAS,EAAE;YACjC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;YACvB,QAAQ,CAAC,WAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,CAAC;SACzC;QAED,MAAM,KAAK,GAAqB,EAAC,GAAG,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,cAAc,GAAG,aAAa,CAAC,EAAE,KAAK,EAAE,cAAc,EAAC,CAAC;QAExH,aAAa;QACb,QAAQ,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,GAAG,KAAK,CAAC;QAC1C,OAAO,CAAC,cAAc,CAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;IAC3D,CAAC,CAAC;AACN,CAAC;AAvBD,wBAuBC","sourcesContent":["import \"reflect-metadata\";\nimport { Keys } from \"../Keys\";\nimport { Type } from \"../interfaces/IType\";\n\n/*\n* Save meta for constructor parameter or function parameter\n* */\nexport function Inject<T = any>(propertyKey?: string | Type<T>) {\n    return (\n        target: any,\n        key: string | symbol,\n        parameterIndex: number\n    ) => {\n        const ctrOrTarget = key ? target.constructor : target;\n        const metaKey = key ? key : Keys.INJECT_PROPERTY_DECORATOR_KEY;\n\n        const reqParamCount = target[key]?.length || target?.length;\n\n        const metadata: any = Reflect.getMetadata(metaKey, ctrOrTarget) || {};\n        if (metadata[metaKey] === undefined) {\n            metadata[metaKey] = [];\n            metadata[Keys.IS_REQUIRED_PARAM] = [];\n        }\n\n        const param: IInjectParamMeta = {key: propertyKey, isRequired: (parameterIndex < reqParamCount), index: parameterIndex};\n\n        // @ts-ignore\n        metadata[metaKey][parameterIndex] = param;\n        Reflect.defineMetadata(metaKey, metadata, ctrOrTarget);\n    };\n}\n\nexport interface IInjectParamMeta {\n    key: any;\n    isRequired: boolean;\n    index: number;\n}\n"]}