{"version":3,"file":"MethodWrapper.js","sourceRoot":"","sources":["../../lib/decorators/MethodWrapper.ts"],"names":[],"mappings":";;;AAAA,kCAA+B;AAG/B,4BAA0B;AAE1B,SAAgB,aAAa,CAAC,GAAkC;IAC5D,OAAO,CACH,MAAc,EACd,WAAmB,EACnB,UAAe,EACjB,EAAE;QAEA,MAAM,QAAQ,GAAQ,OAAO,CAAC,WAAW,CAAC,WAAI,CAAC,kBAAkB,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;QAC7F,aAAa;QACb,QAAQ,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC;QAC5B,OAAO,CAAC,cAAc,CAAC,WAAI,CAAC,kBAAkB,EAAE,QAAQ,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;QAC9E,OAAO,CAAC,cAAc,CAAC,WAAI,CAAC,qBAAqB,oBAAM,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;IAC5F,CAAC,CAAC;AACN,CAAC;AAbD,sCAaC","sourcesContent":["import { Keys } from \"../Keys\";\nimport { Type } from \"../interfaces/IType\";\nimport { IMethodWrapper } from \"../interfaces/IMethodWrapper\";\nimport \"reflect-metadata\";\n\nexport function MethodWrapper(key: string | Type<IMethodWrapper>) {\n    return (\n        target: object,\n        propertyKey: string,\n        descriptor: any\n    ) => {\n\n        const metadata: any = Reflect.getMetadata(Keys.METHOD_WRAPPER_KEY, target.constructor) || {};\n        // @ts-ignore\n        metadata[propertyKey] = key;\n        Reflect.defineMetadata(Keys.METHOD_WRAPPER_KEY, metadata, target.constructor);\n        Reflect.defineMetadata(Keys.METHOD_DESCRIPTOR_KEY, {...descriptor}, target.constructor);\n    };\n}\n"]}