{"version":3,"file":"Injectable.js","sourceRoot":"","sources":["../../lib/decorators/Injectable.ts"],"names":[],"mappings":";;;AAAA,kCAA+B;AAQ/B,SAAgB,UAAU,CAAC,UAA8B,EAAC,aAAa,EAAE,WAAW,EAAC;IACjF,OAAO,CACH,MAAgB,EAClB,EAAE;QACA,MAAM,QAAQ,GAAQ,OAAO,CAAC,WAAW,CAAC,WAAI,CAAC,cAAc,EAAE,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACvF,QAAQ,CAAC,WAAI,CAAC,cAAc,CAAC,GAAG,OAAO,CAAC;QACxC,OAAO,CAAC,cAAc,CAAC,WAAI,CAAC,cAAc,EAAE,QAAQ,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC;IAC5E,CAAC,CAAC;AACN,CAAC;AARD,gCAQC","sourcesContent":["import { Keys } from \"../Keys\";\nimport { IInstantiationMode } from \"../interfaces/IInstantiatable\";\n\n\nexport interface IInjectableOptions {\n    instantiation: IInstantiationMode;\n}\n\nexport function Injectable(options: IInjectableOptions = {instantiation: \"singleton\"}) {\n    return (\n        target: Function\n    ) => {\n        const metadata: any = Reflect.getMetadata(Keys.INJECTABLE_KEY, target.prototype) || {};\n        metadata[Keys.INJECTABLE_KEY] = options;\n        Reflect.defineMetadata(Keys.INJECTABLE_KEY, metadata, target.prototype);\n    };\n}\n"]}