{"version":3,"file":"ChainingOptions.js","sourceRoot":"","sources":["../../lib/chainingOptions/ChainingOptions.ts"],"names":[],"mappings":"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","sourcesContent":["import { Keys } from \"../Keys\";\nimport { IContainerChainingOptions } from \"../interfaces/IContainerChainingOptions\";\nimport { Container } from \"../Container\";\nimport { IInstantiatable } from \"../interfaces/IInstantiatable\";\nimport { ConstantInstantiation } from \"../definitions/ConstantInstantiation\";\nimport { FactoryInstantiation } from \"../definitions/FactoryInstantiation\";\nimport { FactoryResultInstantiation } from \"../definitions/FactoryResultInstantiation\";\nimport { ConstructorInstantiation } from \"../definitions/ConstructorInstantiation\";\n\nexport class ChainingOptions implements IContainerChainingOptions {\n    instantiable: IInstantiatable;\n\n    constructor(private readonly container: Container, private readonly key: string) {\n        this.instantiable = this.container.definitionsRepository.getDefinition(key);\n    }\n\n    private setDefinitionChanges() {\n        this.container.definitionsRepository.definitions.set(this.key, this.instantiable);\n    }\n\n    asPrototype(): this {\n        this.instantiable.definition.instantiationMode = 'prototype';\n        this.setDefinitionChanges();\n        return this;\n    }\n\n    asSingleton(): this {\n        this.instantiable.definition.instantiationMode = 'singleton';\n        this.setDefinitionChanges();\n        return this;\n    }\n\n    asConstant(): this {\n        this.instantiable = new ConstantInstantiation({\n            key: this.key,\n            content: this.instantiable.definition.content,\n            instantiationMode: this.instantiable.definition.instantiationMode\n        });\n        this.setDefinitionChanges();\n        return this;\n    }\n\n    /*\n    * set the @FactoryMethod meta to definition or asFactory() param or 'create'\n    * */\n    asFactory(factoryFnName?: string) {\n        const getFactoryMethod = (ctr: any) => {\n            const meta = Reflect.getMetadata(Keys.FACTORY_METHOD_PROPERTY_DECORATOR_KEY, ctr) || {};\n            return meta[Keys.FACTORY_METHOD_PROPERTY_DECORATOR_KEY];\n        };\n\n        const factoryDefinition = {\n            key: this.key,\n            content: this.instantiable.definition.content,\n            factoryFn: \"create\",\n            instantiationMode: this.instantiable.definition.instantiationMode\n        };\n\n        const metaFactoryMethod = getFactoryMethod(this.instantiable.definition.content);\n\n        if (factoryFnName !== undefined) {\n            factoryDefinition.factoryFn = factoryFnName;\n        } else if (metaFactoryMethod !== undefined) {\n            factoryDefinition.factoryFn = metaFactoryMethod;\n        } else {\n            factoryDefinition.factoryFn = \"create\";\n        }\n\n        this.instantiable = new FactoryInstantiation(factoryDefinition, this.container);\n        this.setDefinitionChanges();\n        return this;\n    }\n\n\n    asFactoryResult(factoryKey: string): this {\n        const factory = this.container.definitionsRepository.getDefinition(factoryKey);\n        if (!(factory instanceof FactoryInstantiation)) {\n            throw new Error(\"factoryKey is not a factory\");\n        }\n\n        this.instantiable = new FactoryResultInstantiation({\n                key: this.key,\n                content: this.instantiable.definition.content,\n                factoryKey,\n                factoryMethodContext: {},\n                instantiationMode: this.instantiable.definition.instantiationMode\n            },\n            this.container);\n\n        this.setDefinitionChanges();\n        return this;\n    }\n\n    withContext(context: {}): this {\n        if (!(this.instantiable instanceof ConstructorInstantiation || this.instantiable instanceof FactoryInstantiation)) {\n            throw new Error(\"cannot set context to  \" + this.instantiable.definition.key);\n        }\n        this.instantiable.definition.context = context;\n        this.setDefinitionChanges();\n        return this;\n    }\n\n    withMethodContext(context: {}): this {\n        if (!(this.instantiable instanceof FactoryResultInstantiation)) {\n            throw new Error(\"cannot set context to  \" + this.instantiable.definition.key);\n        }\n        this.instantiable.definition.factoryMethodContext = context;\n        this.setDefinitionChanges();\n        return this;\n    }\n\n    addTags(tags: string[]) {\n        this.container.definitionsRepository.addTags(this.key, tags);\n    }\n\n}\n"]}